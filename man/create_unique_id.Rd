% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_unique_id.R
\name{create_unique_id}
\alias{create_unique_id}
\title{Create Unique IDs for CDM Tables}
\usage{
create_unique_id(
  db_connection,
  cdm_tables_names,
  extension_name = "",
  schema_name = NULL,
  to_view = FALSE,
  pipeline_extension = "_T2DMM"
)
}
\arguments{
\item{db_connection}{Database connection object.}

\item{cdm_tables_names}{List of CDM tables names to be imported into the db.}

\item{extension_name}{String to be added to the name of the tables,
useful when loading different CDM instances in the same database.}

\item{schema_name}{Optional schema name to prepend to table and view names.
Default is `NULL`.}

\item{to_view}{Logical. If `TRUE` (default),
creates a view with the unique ID column.
If `FALSE`, overwrites the original table.}

\item{pipeline_extension}{When using views when applying the
clean_missing_values on CDM table we must define the name of the pipeline
extension. See add_view for more information.}
}
\description{
This function generates a unique CDM ID for each data record of the specified
Database CDM instance. This step is suggested to be applied after using the
loadDb function.
The function modifies the specified database by creating unique IDs
for the specified CDM tables.
}
\examples{
\dontrun{
# Example usage of create_unique_id
db_connection <- dbConnect(duckdb::duckdb(), ":memory:")
cdm_tables_names <- c("PERSONS", "VISITS", "OBSERVATIONS")
create_unique_id(db_connection, cdm_tables_names,
  extension_name = "_CDM1",
  id_name = "CDM_ID", separator_id = "_"
)
}

}
\keyword{internal}
